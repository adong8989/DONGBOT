import { useEffect, useState } from "react";
import axios from "axios";

const SUPABASE_URL = "https://vfhsoejgxdtewaovqtii.supabase.co";
const SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZmaHNvZWpneGR0ZXdhb3ZxdGlpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3NTEwNTAsImV4cCI6MjA2NjMyNzA1MH0.5moSf3nuElDZuCMh60BDNuNYNscm0wP9aLLi2mqNxIM";

const api = axios.create({
  baseURL: `${SUPABASE_URL}/rest/v1`,
  headers: {
    apikey: SUPABASE_KEY,
    Authorization: `Bearer ${SUPABASE_KEY}`,
  },
});

export default function AdminPanel() {
  const [members, setMembers] = useState([]);
  const [search, setSearch] = useState("");
  const [logs, setLogs] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [editingRemarkId, setEditingRemarkId] = useState(null);
  const [remarkInput, setRemarkInput] = useState("");

  const fetchMembers = async () => {
    const { data } = await api.get("/members?select=*&order=created_at.desc");
    setMembers(data);
  };

  const toggleStatus = async (id, currentStatus) => {
    const newStatus = currentStatus === "active" ? "inactive" : "active";
    await api.patch(`/members?id=eq.${id}`, { status: newStatus });
    fetchMembers();
  };

  const fetchLogs = async (line_user_id) => {
    const { data } = await api.get(`/analysis_logs?line_user_id=eq.${line_user_id}&order=id.desc`);
    setLogs(data);
    setSelectedUser(line_user_id);
  };

  const startEditRemark = (member) => {
    setEditingRemarkId(member.id);
    setRemarkInput(member.remark || "");
  };

  const saveRemark = async (id) => {
    await api.patch(`/members?id=eq.${id}`, { remark: remarkInput });
    setEditingRemarkId(null);
    fetchMembers();
  };

  useEffect(() => {
    fetchMembers();
  }, []);

  const filtered = members.filter((m) => m.line_user_id.includes(search));

  return (
    <div className="p-6 font-sans">
      <h1 className="text-2xl font-bold mb-4">戰神賽特 會員後台</h1>
      <input
        type="text"
        placeholder="搜尋 LINE USER ID"
        className="border p-2 mb-4 w-full"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <table className="w-full border">
        <thead>
          <tr className="bg-gray-100">
            <th className="border p-2">#</th>
            <th className="border p-2">LINE USER ID</th>
            <th className="border p-2">狀態</th>
            <th className="border p-2">加入時間</th>
            <th className="border p-2">備註</th>
            <th className="border p-2">操作</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((m, i) => (
            <tr key={m.id} className="text-sm">
              <td className="border p-2 text-center">{i + 1}</td>
              <td className="border p-2">{m.line_user_id}</td>
              <td className="border p-2 text-center">{m.status}</td>
              <td className="border p-2 text-center">{m.created_at?.split("T")[0]}</td>
              <td className="border p-2">
                {editingRemarkId === m.id ? (
                  <div className="flex space-x-2">
                    <input
                      value={remarkInput}
                      onChange={(e) => setRemarkInput(e.target.value)}
                      className="border p-1 text-sm w-full"
                    />
                    <button
                      className="bg-green-500 text-white px-2 py-1 rounded"
                      onClick={() => saveRemark(m.id)}
                    >儲存</button>
                  </div>
                ) : (
                  <div className="flex justify-between items-center">
                    <span>{m.remark}</span>
                    <button
                      className="text-blue-500 text-xs ml-2"
                      onClick={() => startEditRemark(m)}
                    >編輯</button>
                  </div>
                )}
              </td>
              <td className="border p-2 text-center space-x-2">
                <button
                  className="bg-blue-500 text-white px-2 py-1 rounded"
                  onClick={() => toggleStatus(m.id, m.status)}
                >
                  {m.status === "active" ? "停用 ⛔" : "開通 ✅"}
                </button>
                <button
                  className="bg-gray-600 text-white px-2 py-1 rounded"
                  onClick={() => fetchLogs(m.line_user_id)}
                >
                  查看📊
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {selectedUser && (
        <div className="mt-8">
          <h2 className="text-xl font-semibold mb-2">分析紀錄：{selectedUser}</h2>
          <table className="w-full border">
            <thead>
              <tr className="bg-gray-100">
                <th className="border p-2">#</th>
                <th className="border p-2">msg_hash</th>
                <th className="border p-2">回覆</th>
              </tr>
            </thead>
            <tbody>
              {logs.map((log, i) => (
                <tr key={log.id} className="text-sm">
                  <td className="border p-2 text-center">{i + 1}</td>
                  <td className="border p-2">{log.msg_hash}</td>
                  <td className="border p-2">{log.reply}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
